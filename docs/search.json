{
  "articles": [
    {
      "path": "index.html",
      "title": "Methodenkurs Neurowissenschaft im Computerlab: FS 2021 ",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-03-01T21:43:24+01:00"
    },
    {
      "path": "intro-to-bayesian-stats.html",
      "title": "Untitled",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Nora Jones",
          "url": "https://example.com/norajones"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\n\n\n\n",
      "last_modified": "2021-03-01T21:43:26+01:00"
    },
    {
      "path": "leistungskontrolle.html",
      "title": "Leistungskontrollen",
      "description": "Es gibt __6__ Übungen geben, von denen __5__ bestanden werden müssen.\n",
      "author": [
        {
          "name": {},
          "url": "https://github.com/awellis"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nLeistungskontrolle\n\nLeistungskontrolle\n\nLeistungskontrollen werden in Form von Übungen erbracht. Es wird 6 Übungen geben, von denen 5 bestanden werden müssen.\nEs gibt die Möglichkeit, Übungen falls nötig (nach Verbesserung) ein zweites Mal einzureichen.\nÜbungen werden in einem entsprechenden Ordner auf ILIAS hochgeladen, und zwar in Form eines R Scripts, oder, noch besser, als Rmarkdown File.\n\nEin gute Einführung in Rmarkdown finden Sie z.B. hier.\nFalls Datenfiles dazugehören, sollte alles in einem ZIP File komprimiert werden. Sowohl das R Script als auch das RMarkdown File sollten self-contained sein, d.h. es ist möglich, den Code unabhängig vom Rechner, auf dem der Code geschrieben wurde, auszuführen. Deswegen ist es empfehlenswert, die Übungen als RStudio Projekt hochzuladen.\n\nEine Einführung in RStudio finden Sie hier.\n\n\n\n",
      "last_modified": "2021-03-01T21:43:27+01:00"
    },
    {
      "path": "rmarkdown.html",
      "title": "Rmarkdown",
      "description": "Arbeiten mit RStudio Projects und Rmarkdown.\n",
      "author": [
        {
          "name": {},
          "url": "https://github.com/awellis"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\n RStudio Projekte\nRmarkdown\n\n RStudio Projekte\nIch empfehle (wie schon in den Statistik Übungen) immer in einem RStudio Projekt zu arbeiten. Als Faustregel: jedes Datenanalyseprojekt kriegt ein eigenes RStudio Projekt. Die Vorteile sind:\nMan kann das Projekt schliessen und wieder im gleichen Zustand öffnen, d.h. alle offenen Files werden wieder hergestellt. So kann man z.B. eine Woche lang nicht an einem Projekt arbeiten, und danach wieder in dem Zustan weiterfahren, in dem man aufgehört hat.\nMan muss keine absoluten Pfade benutzen, sondern nur relative.\nRmarkdown\n\nRmarkdown ist eine Erweiterung der Markdown Sprache, welche wiederum eine einfache Sprache ist, um Text zu formattieren.\n\nMit Markdown ist es möglich, HTML oder LaTeX zu erstellen, ohne das man selber viel HTML/LaTeX kennen muss. LaTeX ist vor allem dann gut, wenn man viele Formeln benutzt, oder komplizierte Dokumente erstellt.\n\nRmarkdown erlaubt zusätzlich die Einbindung von R Code; dieser wird zuerst evaluiert, und der Ouput wird zu Markdown konvertiert. Damit lassen sich Paper und Bachelor/Masterarbeiten schreiben, was sehr sinnvoll ist, wenn man mit R arbeitet.\nEin weiterer Grund, Rmarkdown zu benutzen, ist Reproduzierbarkeit. Man kann Code für Datenanalyse direkt in ein Manuskript einbinden, so dass die Resultate immer up-to-date sind, und nicht zwischen Dokumenten hin-und her kopiert werden müssen (was sehr fehleranfällig ist).\nEin exzellente Einführung in Rmarkdown finden Sie im Blog von Danielle Navarro: Einführung in Rmarkdown.\n\nSchauen Sie sich die Slides an.\n\n\nDieses Skript wird mit Rmarkdown erstellt. Wenn Sie auf das Icon oben rechts klicken, sehen Sie den Source Code.\n\nRStudio macht es sehr einfach, mit Rmarkdown zu arbeiten. Un ein neues Dokument zu erstellen, öffnen Sie das File Menu. Dort wählen Sie New File aus, und dann Rmarkdown....\nSie sehen dann dieses Dialogfenster:\n\n\n\nHier können Sie das Output Format bestimmen: HTML, PDF (LaTeX), oder Word.\nNachdem Sie OK geklickt haben, erhalten Sie ein Rmarkdown Template. Dies können Sie mit der Knit Funktion zu einem HTML (oder PDF, Word) konvertieren. Zuerst müssen Sie das Dokument jedoch speichern.\n\nErstellen Sie ein Rmarkdown Dokument und speichern Sie es. Probieren Sie verschiedene Output Formate, und knitten Sie das Dokument.\n\nIn der nächsten Übung machen wir zwei ganz wichtige Dinge: wir benutzen Rmarkdown, und wir generieren Daten. Genauer gesagt benutzen wir ein statistisches (probabilistisches) Modell, um Zufallszahlen zu generieren. In dieser Übung generieren wir Daten, die dem statistischen Modell eines t-Tests entsprechen.\n\nFügen Sie folgenden R Code in einen oder (noch besser) mehreren Code Chunks ein. Benützen Sie Markdown Text, um das Ganze zu kommentieren., d.h. die Kommentare zwischen den R Code Zeilen könnten auch als Prosa zwischen R Code Chunks stehen.\n\n\n\nlibrary(tidyverse)\n\nset.seed(12)\n\n# Number of people wearing fancy hats\nN_fancyhats <- 50 \n\n# Number of people not wearing fancy hats\nN_nofancyhats <- 50\n\n# Population mean of creativity for people wearing fancy hats\nmu_fancyhats <- 103 \n\n# Population mean of creativity for people wearing no fancy hats\nmu_nofancyhats <- 98 \n\n# Average population standard deviation of both groups\nsigma <- 15 \n\n# Generate data\nfancyhats = tibble(Creativity = rnorm(N_fancyhats, mu_fancyhats, sigma),\n               Group = \"Fancy Hat\")\n\nnofancyhats = tibble(Creativity = rnorm(N_nofancyhats, mu_nofancyhats, sigma),\n                 Group = \"No Fancy Hat\")\n\n\nFancyHat <- bind_rows(fancyhats, nofancyhats)  %>%\n    mutate(Group = fct_relevel(as.factor(Group), \"No Fancy Hat\"))\n\n\n# plot both groups\nFancyHat %>% \n    ggplot() +\n    geom_boxplot ((aes(y = Creativity, x = Group))) +\n    labs(title= \"Box Plot of Creativity Values\") +\n    theme_bw()\n\n\n\n\nMit diesem Code simulieren Sie zwei experimentelle Gruppen, mit je 50 Teilnehmern. Die eine Gruppe trug “fancy hats”, die andere Gruppe nicht. Wir generieren normalverteilte Zufallszahlen—für die Fancy Hat Gruppe mit \\(\\mu=103\\), für die No Fancy Hat mit \\(\\mu=98\\). Mit bind_rows() fügen wir beide Dataframes zusammen, und am Schluss machen wir einen Boxplot.\nWenn Sie eine R Code Chunk einfügen, z.B. mit Code > Insert Chunk, erhalten Sie ein Options Icon am oberen rechten Rand des Chunks. Hier können Sie wählen, ob der Code/Output angezeigt wird.\n\n\n\nLösung\n\n\n    Two Sample t-test\n\ndata:  Creativity by Group\nt = -0.63685, df = 98, p-value = 0.2629\nalternative hypothesis: true difference in means is less than 0\n95 percent confidence interval:\n     -Inf 2.647764\nsample estimates:\nmean in group No Fancy Hat    mean in group Fancy Hat \n                  99.20888                  100.85606 \n\nÜbung\nDas gleiche Modell können Sie (für den ungerichteten Fall) auch als Allgemeines Lineares Modell formulieren.\n\n\n\nLösung\n\n\nCall:\nlm(formula = Creativity ~ Group, data = FancyHat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-33.448  -8.578  -1.704   8.645  33.224 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      99.209      1.829  54.245   <2e-16 ***\nGroupFancy Hat    1.647      2.586   0.637    0.526    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 12.93 on 98 degrees of freedom\nMultiple R-squared:  0.004121,  Adjusted R-squared:  -0.006041 \nF-statistic: 0.4056 on 1 and 98 DF,  p-value: 0.5257\n\n\n\n\nLösung\n\n\n\n\n\n\n\n# A tibble: 1 x 3\n  `No Fancy Hat` `Fancy Hat`  diff\n           <dbl>       <dbl> <dbl>\n1           99.2        101. -1.65\n\n\n\n\n",
      "last_modified": "2021-03-01T21:43:31+01:00"
    },
    {
      "path": "uebersicht.html",
      "title": "Übersicht",
      "description": "Inhalt des Kurses.\n",
      "author": [
        {
          "name": {},
          "url": "https://github.com/awellis"
        }
      ],
      "date": "May 4, 2018",
      "contents": "\n\nContents\nEinleitung\nInhalt dieses Kurses\nSoftware\n\n\nEinleitung\nInhalt dieses Kurses\n\nIn diesem Kurs beschäftigen wir uns im weiteren Sinne mit Model-based Cognitive Neuroscience. Dieses Forschungsgebiet existiert noch nicht sehr lange, und ist aus dem Zusammenschluss von mathematischer Modellierung und neurowissenschaftlichen Methoden entstanden.\nIn diesem Kurs geht es um den behavioralen/kognitiven Teil dieses Forschungsgebiets—das bedeutet, mathematische Modelle, anhand derer experimentelle Daten analysiert werden können. Es gibt ein sehr gutes Lehrbuch (Forstmann and Wagenmakers 2015) zum Thema Model-based Cognitive Neuroscience; wir werden einzelne Kapitel daraus verwenden. Das Buch ist auf SpringerLink verfügbar: An Introduction to Model-Based Cognitive Neuroscience. Ausserdem werden wir Beispiele aus dem Buch von Farrell and Lewandowsky (2015) benutzten. Dieses Buch ist leider nicht frei erhältlich—es gibt jedoch eine Website mit Code und Übungen: Computational Modeling of Cognition and Behavior. Wir werden uns ab Mitte des Semesters mit Modellen von Entscheidungsverhalten und kognitiven Modellen beschäftigen, darunter sogennante Bayesian Models of cognition. Damit ist gemeint, dass wir Bayesianische Inferenz als rationales Verhalten betrachten, und Abweichungen davon in menschlichem Verhalten zu suchen.\nWilson and Collins (2019) geben eine sehr gute Einführung in die Prinzipen der Modellierung, obschon das Paper nicht ganz so “simple” ist, wie der Titel verspricht.\nBevor wir zu den kognitiven Modellen kommen, werden wir uns im ersten Teil des Kurses mit Bayesianischer Inferenz beschäftigen, und mit Bayesianischer Datenanalyse. Dies ist nicht mit Bayesianischen Models of Cognition zu verwechslen—Bayesianische Models of Cognition sind Modelle vmenschlichen Verhaltens, oder der Funktionsweise von Gehirnen, während Bayesianische (oder auch frequentistische) Datenanalyse dazu benutzt wird, die Parameter solcher Modelle zu schätzen.\nBayesianische Datenanalyse bietet gegenüber der frequentistischen Statistik viele Vorteile, erfordert aber auch ein Umdenken. Wir werden lernen, wie wir statistische Modelle als lineare Modelle formulieren können, entweder als allgemeine lineare Modelle (ALM), oder verallgemeinerte lineare Modelle (generalized linear models, GLM). Als nächtes folgen dann Multilevel Modelle, mit denen wir häufig verwendete Daten, wie binäre Antworten, oder Reaktionszeiten untersuchen können.\nDie Themen sind also:\nEinführung in die Bayesianische Datenanalyse\nBayesianische Multilevel Modelle\nMathematische Modelle von Entscheidungsverhalten\nModelle von kognitiven Prozessen (Bayesianische und andere)\nSoftware\n\nWir werden in diesem Kurs vor allem mit R arbeiten, aber wenn es um Bayesianische Datenanalyse geht, verwenden wir Stan. Dies ist eine probabilistische Programmiersprache, mit der man Monte Carlo Sampling in einfachen bis sehr komplexen Modellen durchführen kann.\nGlücklicherweise gibt es ein R Package, mit dem man von R aus Stan benutzen kann: RStan. Noch viel einfacher wird es, wenn wir brms oder rstanarm verwenden. Mit diesen Packages lassen sich Bayesianische statistische Modelle mit (fast) derselben Syntax wie frequentistische Modelle schätzen.\n\n\n\nFarrell, Simon, and Stephan Lewandowsky. 2015. “An Introduction to Cognitive Modeling.” In An Introduction to Model-Based Cognitive Neuroscience, edited by Birte U. Forstmann and Eric-Jan Wagenmakers, 3–24. New York, NY: Springer New York. https://doi.org/10.1007/978-1-4939-2236-9_1.\n\n\nForstmann, Birte U., and Eric-Jan Wagenmakers. 2015. “Model-Based Cognitive Neuroscience: A Conceptual Introduction.” In An Introduction to Model-Based Cognitive Neuroscience, edited by Birte U. Forstmann and Eric-Jan Wagenmakers, 139–56. New York, NY: Springer New York. https://doi.org/10.1007/978-1-4939-2236-9_7.\n\n\nWilson, Robert C, and Anne GE Collins. 2019. “Ten Simple Rules for the Computational Modeling of Behavioral Data.” Edited by Timothy E Behrens. eLife 8 (November): e49547. https://doi.org/10.7554/eLife.49547.\n\n\n\n\n",
      "last_modified": "2021-03-01T21:43:32+01:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
